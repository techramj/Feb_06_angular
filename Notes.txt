//Angular 

a.html
b.html
c.html


Angular is a type script based open-source web application framework .
SPA => single page application.


create new project
ng new project-name

check all commands 
ng help

start the project:
ng serve

create componenet
ng generate componenet component-name
ng g c componenet-name

if you don't want to create spec file
ng g c componenet-anme --skip-tests 


@Input() 


Directive:
install node js
https://nodejs.org/en/download/

node -version
npm -version

install Angular

npm install -g @angular/cli
ng version

create a angular project
ng new project-name


start the project
ng serve



Directive:
----------
it is an instruction in the DOM.
*ngIf
*ngFor


<div *ngIf="showPeople">
    <div *ngFor="let person of people">
        <app-person name="person.name"  ></app-person>
    </div>
</div>

--step to use bootstrap
step 1: install bootstrap
npm install --save bootstrap@3

add the path in angualr.json styles property
"node_modules/bootstrap/dist/css/bootstrap.min.css",

            "styles": [
              "node_modules/bootstrap/dist/css/bootstrap.min.css",
              "src/styles.css"
            ],






Selector:
1. Element selector
Component:
@Component({
  selector: 'app-selector-a',
  templateUrl: './selector-a.component.html',
  styleUrls: ['./selector-a.component.css']
})


html(element selector)
<app-selector-a></app-selector-a>


2. Attribute selector
@Component({
  selector: '[app-selector-a]',
  templateUrl: './selector-a.component.html',
  styleUrls: ['./selector-a.component.css']
})

<div app-selector-a></div>


3. class selector
@Component({
  selector: '.app-selector-a',
  templateUrl: './selector-a.component.html',
  styleUrls: ['./selector-a.component.css']
})
<div class='app-selector-a'></div>



what is binding?
binding means communicatation.

Typescript                                                      Template(HTML)

           ---------------------------------------------->
                        output  data

            a. string Interpolation   => {{data}}
            b. property binding => [property] ='data'
            don't combine string Interpolation with property binding
            [disabled] ='{{!allowAddServer}}' => error
          

            <-----------------------------------------------
             react to (users) Event
             Event Binding (event) ='expression'


             <-------------------------------------------->
             two way binding => combinantion of above two
             [(ngModel)] = 'data'

      Note: for ngModel, import FormsModule in components as well as app.module.ts

server
servers



Assignment 1
1. add a input field which will update the username in two way binding
output the username property via spring Interpolation

Add the button which may clicked if the username is not empty
[disabled] =''
once you click the button, the name should be reset to empty string.


Assignment 2:
Congratualtion you clicked 10 times. You will soon get the Silver button tag.
Congratualtion you clicked 50 times. You will soon get the Golden button tag.
Congratualtion you clicked 100 times. You will soon get the Platinum button tag.
<button>click</button>
no of times button clicked: 10


modify the last Assignment
<person name='jack' [age]='20' >

router
rest api => crud operation =>service 
Form


node-js => expose =>


component1.ts                                    component1.html
@Input() count:

comppnent2.ts
count=10;


ng g c button
   <button>
ng g c banner
  {{message}}
ng g c button-banner
message:
count:

<app-banner>
<app-button>

Direction:

Structural Directive
  *ngIf
  *ngFor

attribute Directive
  [ngStyle]="{key:value}"
  key=cssName
  value=cssValue
  eg:
  [ngStyle] = "{'background-color':'green'}"
  [ngStyle] = "{backgroundColor:'green'}"


  [ngClass]="{key:value}"
  key:class
  value:condition


  lifecycle:

  ngOnChanges = > called after a input property changes
  ngOnInit => called once when coponent is initalized
  ngDoCheck => called during every changes.
  ngAfterContentInit => called after contect(ng-content) has projected into view 
  ngAfterViewChecked => called every time view and the child views have been ngAfterViewChecked
  ngOnDestroy => called when componenet is about to destroy


  http://localhost:4200/server
  http://localhost:4200/servers
  http://localhost:4200/lifecycle
  http://localhost:4200/button-banner



  Routing: SPA with multiple views and allows us to navigate to another page. 
  User can switch b/w views without losing application state and properties.

  URL paramter:

  path param /url param
  http://localhost:4200/button-banner/path-param

  http://localhost:4200/button-banner/10

  query param:
  http://localhost:4200/button-banner?count=10&pagesize=1&pageno=5



==========================================================
create dummy server:

step 1: create the folder: dbserver
mkdir dbserver

step 2: move to dbserver
cd dbserver

step 3: initalize the folder as node project
npm init -y


step 4: add file db.json

step 6: add the data eg:
{
  "employees": [
    {
      "id": 1,
      "name": "Jack",
      "email": "jack@test.com",
      "salary": 10000
    },
    {
      "id": 2,
      "name": "Sam",
      "email": "sam@test.com",
      "salary": 2000
    },
    {
      "id": 3,
      "name": "Ramesh",
      "email": "ramesh@gmail.com",
      "salary": 9000
    },
    {
      "id": 4,
      "name": "Roman",
      "email": "roman@test.com",
      "salary": 5000
    },
    {
      "id": 5,
      "name": "Ajay",
      "email": "ajay@test.com",
      "salary": 6000
    },
    {
      "id": 6,
      "name": "Jessica",
      "email": "jessica@test.com",
      "salary": 11000
    },
    {
      "name": "Maria",
      "email": "maria@test.com",
      "salary": 11000,
      "id": 7
    }
  ]
}

run the server: npx json-server --watch db.json


==================================================================

Assignment:
 all compoenent: add the entry in the app-Routing.module.ts file
 Add page-not-found component. This component contain a link. On click it should navigate to homepage.

param-example component and fetch the value from path param and query param



Service:
----------------
service is typescript class with the @Injectable decorator.
The service can be injected into another services as will as component.
ng g s service-name